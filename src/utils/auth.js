import crashlytics from "@react-native-firebase/crashlytics";
import * as SecureStore from "expo-secure-store";
import {
  firstTimeUser,
  refreshToken,
  stopInitialLoading,
} from "../../store/auth/operation";

export const openedFirstTime = async (dispatch) => {
  try {
    const isNotFirstTime = await SecureStore.getItemAsync("isNotFirstTime");
    if (isNotFirstTime) {
      dispatch(firstTimeUser(false));
    } else {
      dispatch(firstTimeUser(true));
      await SecureStore.setItemAsync("isNotFirstTime", "true");
    }
  } catch (err) {
    crashlytics().log(
      "checking if app is opened for first time from expo secure store and storing it if not"
    );
    crashlytics().recordError(err);
    dispatch(firstTimeUser(true));
    // await SecureStore.setItemAsync("isNotFirstTime", "true");
  }
};

export const checkTokenInSecureStore = async (
  isAuthenticated,
  ttl,
  dispatch
) => {
  if ((isAuthenticated && ttl > new Date().getTime())) {
    dispatch(stopInitialLoading());
  } else {
    try {
      const refreshingToken = await SecureStore.getItemAsync("refreshToken");
      const parentId = await SecureStore.getItemAsync("parentId");

      if (refreshingToken && parentId) {
        dispatch(refreshToken({ refreshingToken, parentId }));
      } else {
        dispatch(stopInitialLoading());
      }
    } catch (err) {
      // error generated by SecureStore
      crashlytics().log(
        "accessing resfreshToken and parentId from expo secure store"
      );
      crashlytics().recordError(err);
    }
  }
};

export const generateAxiosError = (message, config) => {
  const networkError = new Error(message);
  networkError.config = config;
  networkError.isAxiosError = true;
  return Promise.reject(networkError);
};
